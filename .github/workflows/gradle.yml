name: Java CI/CD with Gradle to AWS EC2

on:
  pull_request:
    branches: [ "dev" ]
  push:
    branches: [ "dev" ]
  workflow_dispatch: # 수동으로 워크플로우를 실행할 수 있도록

jobs:
  build:

    #    strategy:
    #      matrix:
    #      fail-fast: false # 실패해도 킵고잉

    runs-on: ubuntu-24.04-arm
    # runner 찾기 : https://docs.github.com/ko/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4 # https://github.com/actions/cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Upload build artifact
        id: upload-artifact # id로 output 출력 (steps.upload-artifact.outputs.artifact-path) 같은 작업 위해서 id 사용
        uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
        with:
          name: java-build-artifact
          path: build/libs/*-SNAPSHOT.jar

  dependency-submission:

    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  deploy:

    runs-on: ubuntu-24.04-arm
    needs: build
    # if: github.event_name == 'push'

    steps:
      - name: Download build artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: java-build-artifact # 업로드한 이름과 일치할 것
          path: build/libs

      - name: Display structure of downloaded files
        run: ls -R build/libs

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Copy app.jar to EC2
        run: |
          scp -o StrictHostKeyChecking=no ./build/libs/unsemawang-0.0.1-SNAPSHOT.jar ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/app.jar


      - name: SSH into EC2 and stop old app.jar (if running)
        run: |
            # 기존에 실행 중인 java 프로세스를 종료합니다.
            if pgrep -f 'java -jar /home/ubuntu/app.jar' > /dev/null; then
              echo 'Stopping existing app.jar process...'
              pkill -f 'java -jar /home/ubuntu/app.jar'
            else
              echo 'No running app.jar process found.'
            fi
    
      - name: SSH into EC2 and run new app.jar
        run: |
            # 환경변수 설정
            export GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PATH }}
            export ENV_PATH=${{ secrets.ENV_PATH }}
            export $(cat $ENV_PATH | xargs)
            # JAR 파일 실행
            nohup java -jar /home/ubuntu/app.jar &

